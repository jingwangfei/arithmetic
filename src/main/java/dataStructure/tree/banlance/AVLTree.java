package dataStructure.tree.banlance;

/**
 *
 * @Author jingtao
 * @Date 2017-08-25 9:42
 **/
public class AVLTree {

    /**
     *  自平衡二叉查找树之, AVL树:
     *
     *     平衡 -> 在二叉查找树中, 任意一个节点的, 左右子树的高度之差, 不能超过1.
     *
     *     在查找元素的时候, 在最坏的情况下, 时间复杂度是什么呢?
     *     f(h) = 0, h = 0;
     *     f(h) = 1, h = 1;
     *     f(h) = 2, h = 2;
     *     f(h) =  1 + f(h-1) + f(h-2)
     *
     *     在插入, 和删除元素的时候, 如何维持AVL树的平衡性呢?
     *
     *     通过旋转, 进行重新平衡调整,
     *     旋转, 既可以保障, 二叉树的查找性质, 又能保障,AVL的平衡性.
     *
     *     插入:
     *          分4种情况, 进行平衡调整
     *          当调整完毕后, 不需要, 进行递归进行调整
     *          因为, 高度已经变为之前的高度了.
     *
     *     删除:
     *          先按照普通二叉查找树的方式, 删除节点, 然后再进行平衡调整.
     *
     *          删除平衡调整 -> 从最开始因为删除节点而导致树高发生变化的节点开始, 向上回溯调整树高.
     *
     *          如何确定, 最先发生树高变化的结点?
     *              分3种情况
     *              1). x是叶子结点，“最先发生树高变化的结点”为x的父结点；
     *              2). x只有一个孩子，“最先发生树高变化的结点”为x的父结点；
     *              3). x有两个孩子，则“最先发生树高变化的结点”为x的后驱的父结点。
     *
     */

}
